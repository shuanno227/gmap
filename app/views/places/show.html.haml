%p#notice= notice
%p
  %strong Name:
  = @place.name
%p
  %strong Description:
  = @place.description
%p
  %strong Latitude:
  = @place.latitude
%p
  %strong Longitude:
  = @place.longitude
= link_to 'Edit', edit_place_path(@place)
|
= link_to 'Back', places_path, data: {"turbolinks" => false}





%head
  :css
    #gmap1, #gmap2, #gmap3 {
      height: 400px;
      width: 800px;
    }
    
%body
  %p.gmapTitle1 １番目に近い地点
  %p.gmapTitle1 １番目に近い地点
  .gamp1#gmap1
  %p.gmapTitle2 2番目に近い地点
  .gmap2#gmap2
  %p.gmapTitle3 3番目に近い地点
  .gmap3#gmap3
  / 地図を表示する領域
  :javascript
    function initMap() { 
      // 地図を生成して表示
      var map1 = new google.maps.Map(document.getElementById("gmap1"), {
        zoom: 13,
        center: new google.maps.LatLng(gon.lat, gon.lng),  //Madison Av/E 38 St
        mapTypeId: "roadmap"
        
      });
      var map2 = new google.maps.Map(document.getElementById("gmap2"), {
        zoom: 13,
        center: new google.maps.LatLng(gon.lat, gon.lng),  //Madison Av/E 38 St
        mapTypeId: "roadmap"
        
      });
      var map3 = new google.maps.Map(document.getElementById("gmap3"), {
        zoom: 13,
        center: new google.maps.LatLng(gon.lat, gon.lng),  //Madison Av/E 38 St
        mapTypeId: "roadmap"
        
      });
      
      //DirectionsService のオブジェクトを生成
      var directionsService1 = new google.maps.DirectionsService();
      var directionsService2 = new google.maps.DirectionsService();
      var directionsService3 = new google.maps.DirectionsService();
      //DirectionsRenderer のオブジェクトを生成
      var directionsRenderer1 = new google.maps.DirectionsRenderer();
      var directionsRenderer2 = new google.maps.DirectionsRenderer();
      var directionsRenderer3 = new google.maps.DirectionsRenderer();
      //directionsRenderer と地図を紐付け
      directionsRenderer1.setMap(map1); 
      directionsRenderer2.setMap(map2); 
      directionsRenderer3.setMap(map3);
      //リクエストの出発点の位置（Empire State Building 出発地点の緯度経度）
      var start = new google.maps.LatLng(gon.lat, gon.lng);  
      //リクエストの終着点の位置（Grand Central Station 到着地点の緯度経度）
      
      
      var ends = new Array;
      ends = [];
      var distanceOrigin = new Array;
      distanceOrigin = [];
      var distanceClone = new Array;
      distanceClone = [];
      var distanceEdit = new Array;
      distanceEdit = [];
      for (var i = 0; i < gon.lats.length; i++) {
        ends.push(new google.maps.LatLng(gon.lats[i], gon.lngs[i]));
      }
      for (var j = 0; j < gon.lats.length; j++) {
        distanceOrigin[j] = google.maps.geometry.spherical.computeDistanceBetween(start, ends[j]);
        distanceClone[j] = google.maps.geometry.spherical.computeDistanceBetween(start, ends[j]);
        if (distanceOrigin[j] === Math.min.apply(null, distanceOrigin)) {
          var end1 = ends[j];
          var goalName1 = gon.places[j].name
          startName = gon.place.name
        }
      } 
      function compare(a, b){
        let comparison = 0;

        if (a > b) {
          comparison = 1;
        } else if (b > a) {
          comparison = -1;
        }

        return comparison;
      }

      distanceEdit = distanceClone.sort(compare);

      for (var i = 0; i < gon.lats.length; i++) {
        if (distanceOrigin[i] === distanceEdit[1]) {
          var end2 = ends[i];
          var goalName2 = gon.places[i].name;
        }
        if (distanceOrigin[i] === distanceEdit[2]) {
          var end3 = ends[i];
          var goalName3 = gon.places[i].name;
        }
        
      }
      var Start_infowindow1 = new google.maps.InfoWindow({
        content: startName,
        position: start
      });
      var Start_infowindow2 = new google.maps.InfoWindow({
        content: startName,
        position: start
      });
      var Start_infowindow3 = new google.maps.InfoWindow({
        content: startName,
        position: start
      });
      var End_infowindow1 = new google.maps.InfoWindow({
        content: goalName1,
        position: end1
      });
      var End_infowindow2 = new google.maps.InfoWindow({
        content: goalName2,
        position: end2
      });
      var End_infowindow3 = new google.maps.InfoWindow({
        content: goalName3,
        position: end3
      });
      
       // ルートを取得するリクエスト
      var request1 = {
        origin: start,      // 出発地点の緯度経度
        destination: end1,   // 到着地点の緯度経度
        travelMode: 'WALKING' //トラベルモード（歩き）
      };
       var request2 = {
        origin: start,      // 出発地点の緯度経度
        destination: end2,   // 到着地点の緯度経度
        travelMode: 'WALKING' //トラベルモード（歩き）
      };
       var request3 = {
        origin: start,      // 出発地点の緯度経度
        destination: end3,   // 到着地点の緯度経度
        travelMode: 'WALKING' //トラベルモード（歩き）
      };

      //DirectionsService のオブジェクトのメソッド route() にリクエストを渡し、
      //コールバック関数で結果を setDirections(result) で directionsRenderer にセットして表示
      directionsService1.route(request1, function(result, status) {
        //ステータスがOKの場合、
        if (status === 'OK') {
          directionsRenderer1.setDirections(result); //取得したルート（結果：result）をセット
          Start_infowindow1.open(map1);
          End_infowindow1.open(map1);
        }else{
          alert("取得できませんでした：" + status);
        }
      });
      directionsService2.route(request2, function(result, status) {
        //ステータスがOKの場合、
        if (status === 'OK') {
          directionsRenderer2.setDirections(result); //取得したルート（結果：result）をセット
          Start_infowindow2.open(map2);
          End_infowindow2.open(map2);
        }else{
          alert("取得できませんでした：" + status);
        }
      });
      directionsService3.route(request3, function(result, status) {
        //ステータスがOKの場合、
        if (status === 'OK') {
          directionsRenderer3.setDirections(result); //取得したルート（結果：result）をセット
          Start_infowindow3.open(map3);
          End_infowindow3.open(map3);
        }else{
          alert("取得できませんでした：" + status);
        }
      });
      
    };


    
   
  %script{:async => "", :defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=AIzaSyAU8Lqc8zivL85a3FicZriuI5a_J8II3fA&callback=initMap&libraries=geometry"}
  
  / YOUR_API_KEYの部分は取得した APIキーで置き換えます。

